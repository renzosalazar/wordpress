<?xml version="1.0" encoding="UTF-8"?>
<!-- This is a code snippets export file generated by the Code Snippets WordPress plugin. -->
<!-- https://wordpress.org/plugins/code-snippets -->
<!-- To import these snippets a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Install the Code Snippets plugin using the directions provided at the above link. -->
<!-- 3. Go to 'Tools: Import' in the WordPress admin panel. -->
<!-- 4. Click on the "Code Snippets" importer in the list -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. Code Snippets will then import all of the snippets and associated information contained in this file into your site. -->
<!-- 7. You will then have to visit the 'Snippets: All Snippets' admin menu and activate desired snippets. -->
<!-- generator="Code Snippets/2.8.6" created="2017-08-28 18:54" -->
<snippets>
  <snippet scope="1">
    <name>Customizer remove all</name>
    <desc></desc>
    <tags>remove, customizer, wordpress</tags>
    <code>// Exit if accessed directly&#13;
if ( __FILE__ == $_SERVER['SCRIPT_FILENAME'] ) { exit; }&#13;
&#13;
&#13;
if (!class_exists('Customizer_Remove_All')) :&#13;
class Customizer_Remove_All {&#13;
&#13;
	/**&#13;
	 * @var Customizer_Remove_All&#13;
	 */&#13;
	private static $instance;&#13;
&#13;
&#13;
	/**&#13;
	 * Main Instance&#13;
	 *&#13;
	 * Allows only one instance of Customizer_Remove_All in memory.&#13;
	 *&#13;
	 * @static&#13;
	 * @staticvar array $instance&#13;
	 * @return Big mama, Customizer_Remove_All&#13;
	 */&#13;
	public static function instance() {&#13;
		if ( ! isset( self::$instance ) &amp;&amp; ! ( self::$instance instanceof Customizer_Remove_All ) ) {&#13;
&#13;
			// Start your engines!&#13;
			self::$instance = new Customizer_Remove_All;&#13;
&#13;
			// Load the structures to trigger initially&#13;
			add_action( 'plugins_loaded', array( self::$instance, 'load_languages' ) );&#13;
			add_action( 'init', array( self::$instance, 'init' ), 10 ); // was priority 5&#13;
			add_action( 'admin_init', array( self::$instance, 'admin_init' ), 10 ); // was priority 5&#13;
&#13;
		}&#13;
		return self::$instance;&#13;
	}&#13;
&#13;
	/**&#13;
	 * Run all plugin stuff on init.&#13;
	 *&#13;
	 * @return void&#13;
	 */&#13;
	public function init() {&#13;
&#13;
		// Remove customize capability&#13;
		add_filter( 'map_meta_cap', array( self::$instance, 'filter_to_remove_customize_capability'), 10, 4 );&#13;
	}&#13;
&#13;
	/**&#13;
	 * Run all of our plugin stuff on admin init.&#13;
	 *&#13;
	 * @return void&#13;
	 */&#13;
	public function admin_init() {&#13;
&#13;
		// Drop some customizer actions&#13;
		remove_action( 'plugins_loaded', '_wp_customize_include', 10);&#13;
		remove_action( 'admin_enqueue_scripts', '_wp_customize_loader_settings', 11);&#13;
&#13;
		// Manually overrid Customizer behaviors&#13;
		add_action( 'load-customize.php', array( self::$instance, 'override_load_customizer_action') );&#13;
	}&#13;
&#13;
	/**&#13;
	 * Load our language files&#13;
	 *&#13;
	 * @access public&#13;
	 * @return void&#13;
	 */&#13;
	public function load_languages() {&#13;
		// Set textdomain string&#13;
		$textdomain = 'wp-crap';&#13;
&#13;
		// The 'plugin_locale' filter is also used by default in load_plugin_textdomain()&#13;
		$locale = apply_filters( 'plugin_locale', get_locale(), $textdomain );&#13;
&#13;
		// Set filter for WordPress languages directory&#13;
		$wp_languages_dir = apply_filters( 'crap_wp_languages_dir',	WP_LANG_DIR . '/wp-crap/' . $textdomain . '-' . $locale . '.mo' );&#13;
&#13;
		// Translations: First, look in WordPress' "languages" folder&#13;
		load_textdomain( $textdomain, $wp_languages_dir );&#13;
&#13;
		// Translations: Next, look in plugin's "languages" folder (default)&#13;
		$plugin_dir = basename( dirname( __FILE__ ) );&#13;
		$languages_dir = apply_filters( 'crap_languages_dir', $plugin_dir . '/languages' );&#13;
		load_plugin_textdomain( $textdomain, FALSE, $languages_dir );&#13;
	}&#13;
&#13;
	/**&#13;
	 * Remove customize capability&#13;
	 *&#13;
	 * This needs to be in public so the admin bar link for 'customize' is hidden.&#13;
	 */&#13;
	public function filter_to_remove_customize_capability( $caps = array(), $cap = '', $user_id = 0, $args = array() ) {&#13;
		if ($cap == 'customize') {&#13;
			return array('nope'); // thanks @ScreenfeedFr, http://bit.ly/1KbIdPg&#13;
		}&#13;
&#13;
		return $caps;&#13;
	}&#13;
&#13;
	/**&#13;
	 * Manually overriding specific Customizer behaviors&#13;
	 */&#13;
	public function override_load_customizer_action() {&#13;
		// If accessed directly&#13;
		wp_die( __( 'The Customizer is currently disabled.', 'wp-crap' ) );&#13;
	}&#13;
&#13;
} // End Class&#13;
endif;&#13;
&#13;
/**&#13;
* The main function. Use like a global variable, except no need to declare the global.&#13;
*&#13;
* @return object The one true Customizer_Remove_All Instance&#13;
*/&#13;
function Customizer_Remove_All() {&#13;
	return Customizer_Remove_All::instance();&#13;
}&#13;
&#13;
// GO!&#13;
Customizer_Remove_All();</code>
  </snippet>
</snippets>
